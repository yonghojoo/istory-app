#5
name: istory ci/cd dev pipeline

permissions:
  contents: read
  security-events: write  # CodeQL 결과를 업로드하기 위한 권한
  actions: read

on:
  push:
    branches: [ "test"]
    paths:
      - 'xinfra/ec2-scaling/**'
      - '.github/workflows/ec2-scaling-deploy.yml'
      - 'scripts/**'
      - 'appspec.yml'
jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: 배포용 소스 다운로드
        uses: actions/checkout@v4

      - name: 개발용 application.yml 생성
        run: |
          cat > src/main/resources/application.yml << EOF
          spring:
            datasource:
              url: ${{ secrets.DATABASE_URL }} # 예dbc:mysql://localhost:3306/istory
              username: ${{ secrets.MYSQL_USER }}
              password: ${{ secrets.MYSQL_PASSWORD }}
              driver-class-name: com.mysql.cj.jdbc.Driver
            jpa:
              database-platform: org.hibernate.dialect.MySQL8Dialect
              hibernate:
                ddl-auto: update
              show-sql: true
            application:
              name: USER-SERVICE
            jwt:
              issuer: user@gmail.com
              secret_key: study-springboot
          management:
            endpoints:
              web:
                exposure:
                  include: health,info
            endpoint:
              health:
                show-details: always
          EOF

      - name: AWS 접속정보 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }} 

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew bootJar

      - name: Generate artifact name with timestamp
        run: |
          echo "ARTIFACT_NAME=springboot-$(date +'%Y%m%d-%H%M%S').jar" >> $GITHUB_ENV

      - name: Create deployment package
        run: |
          mkdir -p deployment/scripts
          cp build/libs/*.jar deployment/${{ env.ARTIFACT_NAME }}
          cp appspec.yml deployment/
          cp scripts/* deployment/scripts/
          chmod +x deployment/scripts/*.sh
          chmod +x deployment/*.jar
          cd deployment && zip -r ../deploy.zip .          

      - name: S3 업로드
        run: |
          # JAR 파일 업로드
          aws s3 cp deployment/${{ env.ARTIFACT_NAME }} s3://${{ secrets.AWS_S3_BUCKET }}/artifacts/
          # 배포 패키지 업로드
          aws s3 cp deploy.zip s3://${{ secrets.AWS_S3_BUCKET }}/deploy/deploy.zip  
      - name: 기존 진행중인 배포 삭제
        run: |
          DEPLOYMENTS=$(aws deploy list-deployments \
            --application-name istory-app \
            --deployment-group-name istory-prod-deploy-group \
            --include-only-statuses "InProgress" \
            --query 'deployments[]' \
            --output text)

          if [ ! -z "$DEPLOYMENTS" ]; then
            for deployment in $DEPLOYMENTS; do
              echo "Stopping deployment $deployment"
              aws deploy stop-deployment --deployment-id $deployment
            done
            # 잠시 대기하여 취소가 완료되도록 함
            sleep 10
          fi
      - name: EC2 배포 수행
        id: deploy
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name istory-app \
            --deployment-group-name istory-prod-deploy-group \
            --s3-location bucket=${{ secrets.AWS_S3_BUCKET }},key=deploy/deploy.zip,bundleType=zip \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --output text \
            --query 'deploymentId')
          echo "deployment_id=${DEPLOYMENT_ID}" >> $GITHUB_OUTPUT

      - name: 배포 최종 성공 확인
        run: |
          aws deploy wait deployment-successful --deployment-id ${{ steps.deploy.outputs.deployment_id }}